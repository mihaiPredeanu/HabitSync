// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- User ---
model User {
  id            String   @id @default(uuid())
  email         String   @unique
  passwordHash  String
  displayName   String?
  avatarUrl     String?
  pushToken     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  habits        Habit[]
  toDos         ToDo[]
  shoppingLists ShoppingList[]
  activityLogs  ActivityLog[]
  notifications Notification[]
  journalEntries JournalEntry[]
}

// --- Category ---
model Category {
  id        String   @id @default(uuid())
  name      String
  color     String
  icon      String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  habits    Habit[]
  toDos     ToDo[]
}

// --- Habit ---
model Habit {
  id                  String   @id @default(uuid())
  name                String
  color               String
  icon                String
  type                String
  frequencyType       String
  frequencyValue      Int?
  frequencyDaysOfWeek String? // comma-separated string (e.g., "1,3,5")
  priority            String
  archived            Boolean @default(false)
  sharedWith          String? // comma-separated user ids
  isDefault           Boolean @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User    @relation(fields: [userId], references: [id])
  userId              String
  category            Category? @relation(fields: [categoryId], references: [id])
  categoryId          String?
  logs                HabitLog[]
}

// --- HabitLog ---
model HabitLog {
  id         String   @id @default(uuid())
  habit      Habit    @relation(fields: [habitId], references: [id])
  habitId    String
  date       String   // YYYY-MM-DD
  value      String   // 'true', 'false', or number as string
  note       String?
  timeOfDay  String?
  createdAt  DateTime @default(now())
}

// --- ToDo ---
model ToDo {
  id            String   @id @default(uuid())
  title         String
  completed     Boolean  @default(false)
  dueDate       DateTime?
  recurring     Boolean  @default(false)
  recurrenceRule String?
  priority      String
  timeOfDay     String?
  sharedWith    String? // comma-separated user ids
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  category      Category? @relation(fields: [categoryId], references: [id])
  categoryId    String?
}

// --- ShoppingList ---
model ShoppingList {
  id            String   @id @default(uuid())
  name          String
  sharedWith    String? // comma-separated user ids
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  items         ShoppingItem[]
}

// --- ShoppingItem ---
model ShoppingItem {
  id            String   @id @default(uuid())
  name          String
  checked       Boolean  @default(false)
  sharedWith    String? // comma-separated user ids
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  list          ShoppingList @relation(fields: [listId], references: [id])
  listId        String
}

// --- JournalEntry ---
model JournalEntry {
  id        String   @id @default(uuid())
  date      String   // YYYY-MM-DD
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

// --- Notification ---
model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String
  title     String
  body      String
  data      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

// --- ActivityLog ---
model ActivityLog {
  id         String   @id @default(uuid())
  itemId     String
  itemType   String   // 'todo' | 'shopping' | 'shoppingList'
  action     String
  userId     String
  details    String?
  timestamp  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])
}
